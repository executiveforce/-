编程思想之一：不要随意去修改别人已经写好的代码或者方法，如果需要修改，以通过代理的方式来扩展该方法。
举个例子来说明代码的作用：假设想邀请一位明星，那么并不是直接联系明星，而是联系明星的经纪人，来达到同样的目的。明星就是一个目标对象，他只要负责活动中的节目，而其他琐碎的事情就交给他的代理人来解决。
代理模式的关键点是：代理对象与目标对象。代理对象是对目标对象的扩展，并会调用目标对象。
1、静态代理：需要定义接口或者父类，被代理对象与代理对象一起实现相同的接口或者是继承相同父类。
2、动态代理：JDK代理，接口代理
代理对象不需要实现接口，但是目标对象一定要实现接口，否则不能用动态代理。
3、Cglib代理
静态代理和动态代理模式都是要求目标对象是实现一个接口的目标对象，但是有时候目标对象只是一个单独的对象，并没有实现任何的接口，这个时候就可以使用目标对象子类的方式实现代理。

抽象角色：指代理角色和真实角色对外提供的公共方法，一般为一个接口。
真实角色：需要实现抽象角色接口，定义了真实角色所要实现的业务逻辑，以便供代理角色调用。也就是真正的业务逻辑再次。
代理角色：需要实现抽象角色接口，是真实角色的代理，通过真实角色的业务逻辑方法来实现抽象方法，并可以附加自己的操作。将统一的流程控制都放到代理角色中处理。
